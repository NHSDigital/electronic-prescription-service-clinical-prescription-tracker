name: deploy to environments

on:
  workflow_dispatch:

env:
  BRANCH_NAME: ${{ github.event.ref.BRANCH_NAME }}

jobs:
  get_asdf_version:
    runs-on: ubuntu-22.04
    outputs:
      asdf_version: ${{ steps.asdf-version.outputs.version }}
      tag_format: ${{ steps.load-config.outputs.TAG_FORMAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get asdf version
        id: asdf-version
        run: echo "version=$(awk '!/^#/ && NF {print $1; exit}' .tool-versions.asdf)" >> "$GITHUB_OUTPUT"
      - name: Load config value
        id: load-config
        run: |
          TAG_FORMAT=$(yq '.TAG_FORMAT' .github/config/settings.yml)
          echo "TAG_FORMAT=$TAG_FORMAT" >> "$GITHUB_OUTPUT"
  quality_checks:
    uses: NHSDigital/eps-workflow-quality-checks/.github/workflows/quality-checks.yml@v5.1.0
    needs: [get_asdf_version]
    with:
      asdfVersion: ${{ needs.get_asdf_version.outputs.asdf_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  get_commit_id:
    runs-on: ubuntu-22.04
    outputs:
      commit_id: ${{ steps.commit_id.outputs.commit_id }}
    steps:
      - name: Get Commit ID
        id: commit_id
        run: |
          echo "commit_id=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  tag_release:
    needs: [quality_checks, get_commit_id, get_asdf_version]
    uses: NHSDigital/eps-workflow-semantic-release/.github/workflows/tag-release.yml@f80157cecce288dd175e61b477a1d2dbe9c88b99
    with:
      dry_run: false
      asdfVersion: ${{ needs.get_asdf_version.outputs.asdf_version }}
      branch_name: main
      publish_package: false
      tag_format: ${{ needs.get_asdf_version.outputs.tag_format }}
    secrets: inherit

  package_code:
    needs: [get_commit_id, tag_release]
    uses: ./.github/workflows/cdk_package_code.yml
    with:
      VERSION_NUMBER: ${{ needs.tag_release.outputs.version_tag }}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}

  release_dev:
    needs: [get_commit_id, tag_release, package_code]
    uses: ./.github/workflows/cdk_release_code.yml
    with:
      STACK_NAME: cpt
      AWS_ENVIRONMENT: dev
      APIGEE_ENVIRONMENT: internal-dev
      VERSION_NUMBER: ${{ needs.tag_release.outputs.version_tag }}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
      CDK_APP_Name: CptsApiApp
      LOG_RETENTION_IN_DAYS: 30
      LOG_LEVEL: DEBUG
      ENABLE_MUTUAL_TLS: false
      TRUSTSTORE_FILE: clinical-tracker-truststore.pem
      RUN_REGRESSION_TESTS: true
      CREATE_INT_RELEASE_NOTES: true
      CREATE_PROD_RELEASE_NOTES: true
      MARK_JIRA_RELEASED: false
      CREATE_INT_RC_RELEASE_NOTES: false
      MTLS_KEY: clinical-tracker-mtls-1
      IS_PULL_REQUEST: false
      FORWARD_CSOC_LOGS: false
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.DEV_CLOUD_FORMATION_DEPLOY_ROLE }}
      CDK_PULL_IMAGE_ROLE: ${{ secrets.DEV_CDK_PULL_IMAGE_ROLE }}
      PROXYGEN_ROLE: ${{ secrets.PROXYGEN_PTL_ROLE }}
      TARGET_SPINE_SERVER: ${{ secrets.DEV_TARGET_SPINE_SERVER }}
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}
      DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      INT_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.INT_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      PROD_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.PROD_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE: ${{ secrets.DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE }}

  # release_dev_sandbox:
  #   needs: [get_commit_id, tag_release, package_code, release_dev]
  #   uses: ./.github/workflows/cdk_release_code.yml
  #   with:
  #     STACK_NAME: cpt-sandbox
  #     AWS_ENVIRONMENT: dev
  #     APIGEE_ENVIRONMENT: internal-dev-sandbox
  #     VERSION_NUMBER: ${{ needs.tag_release.outputs.version_tag }}
  #     COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
  #     CDK_APP_Name: CptsApiSandboxApp
  #     LOG_RETENTION_IN_DAYS: 30
  #     LOG_LEVEL: DEBUG
  #     ENABLE_MUTUAL_TLS: false
  #     TRUSTSTORE_FILE: clinical-tracker-sandbox-truststore.pem
  #   secrets:
  #     CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.DEV_CLOUD_FORMATION_DEPLOY_ROLE }}
  #     CDK_PULL_IMAGE_ROLE: ${{ secrets.DEV_CDK_PULL_IMAGE_ROLE }}
  #     PROXYGEN_ROLE: ${{ secrets.PROXYGEN_PTL_ROLE }}
  #     TARGET_SPINE_SERVER: sandbox
  #     REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}

  release_ref:
    needs: [get_commit_id, tag_release, package_code, release_dev] # TODO: add sandbox back once implemented
    uses: ./.github/workflows/cdk_release_code.yml
    with:
      STACK_NAME: cpt
      AWS_ENVIRONMENT: ref
      APIGEE_ENVIRONMENT: ref
      VERSION_NUMBER: ${{ needs.tag_release.outputs.version_tag }}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
      CDK_APP_Name: CptsApiApp
      LOG_RETENTION_IN_DAYS: 30
      LOG_LEVEL: DEBUG
      ENABLE_MUTUAL_TLS: false
      TRUSTSTORE_FILE: clinical-tracker-truststore.pem
      RUN_REGRESSION_TESTS: false
      MTLS_KEY: clinical-tracker-mtls-1
      IS_PULL_REQUEST: false
      FORWARD_CSOC_LOGS: false
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.REF_CLOUD_FORMATION_DEPLOY_ROLE }}
      CDK_PULL_IMAGE_ROLE: ${{ secrets.REF_CDK_PULL_IMAGE_ROLE }}
      PROXYGEN_ROLE: ${{ secrets.PROXYGEN_PTL_ROLE }}
      TARGET_SPINE_SERVER: ${{ secrets.REF_TARGET_SPINE_SERVER }}
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}

  release_qa:
    needs: [get_commit_id, tag_release, package_code, release_dev] # TODO: add sandbox back once implemented
    uses: ./.github/workflows/cdk_release_code.yml
    with:
      STACK_NAME: cpt
      AWS_ENVIRONMENT: qa
      APIGEE_ENVIRONMENT: internal-qa
      VERSION_NUMBER: ${{ needs.tag_release.outputs.version_tag }}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
      CDK_APP_Name: CptsApiApp
      LOG_RETENTION_IN_DAYS: 30
      LOG_LEVEL: DEBUG
      ENABLE_MUTUAL_TLS: false
      TRUSTSTORE_FILE: clinical-tracker-truststore.pem
      RUN_REGRESSION_TESTS: true
      MTLS_KEY: clinical-tracker-mtls-1
      IS_PULL_REQUEST: false
      FORWARD_CSOC_LOGS: false
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.QA_CLOUD_FORMATION_DEPLOY_ROLE }}
      CDK_PULL_IMAGE_ROLE: ${{ secrets.QA_CDK_PULL_IMAGE_ROLE }}
      PROXYGEN_ROLE: ${{ secrets.PROXYGEN_PTL_ROLE }}
      TARGET_SPINE_SERVER: ${{ secrets.QA_TARGET_SPINE_SERVER }}
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}

  release_int:
    needs: [get_commit_id, tag_release, package_code, release_qa] # TODO: add sandbox back once implemented
    uses: ./.github/workflows/cdk_release_code.yml
    with:
      STACK_NAME: cpt
      AWS_ENVIRONMENT: int
      APIGEE_ENVIRONMENT: int
      VERSION_NUMBER: ${{ needs.tag_release.outputs.version_tag }}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
      CDK_APP_Name: CptsApiApp
      LOG_RETENTION_IN_DAYS: 30
      LOG_LEVEL: DEBUG
      ENABLE_MUTUAL_TLS: false
      TRUSTSTORE_FILE: clinical-tracker-truststore.pem
      RUN_REGRESSION_TESTS: false # these do not work currently
      CREATE_INT_RELEASE_NOTES: true
      CREATE_PROD_RELEASE_NOTES: true
      MARK_JIRA_RELEASED: false
      CREATE_INT_RC_RELEASE_NOTES: true
      MTLS_KEY: clinical-tracker-mtls-1
      IS_PULL_REQUEST: false
      FORWARD_CSOC_LOGS: false
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.INT_CLOUD_FORMATION_DEPLOY_ROLE }}
      CDK_PULL_IMAGE_ROLE: ${{ secrets.INT_CDK_PULL_IMAGE_ROLE }}
      PROXYGEN_ROLE: ${{ secrets.PROXYGEN_PROD_ROLE }}
      TARGET_SPINE_SERVER: ${{ secrets.INT_TARGET_SPINE_SERVER }}
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}
      DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      INT_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.INT_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      PROD_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.PROD_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE: ${{ secrets.DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE }}

    # release_sandbox:
  #   needs: [get_commit_id, tag_release, package_code, release_qa]
  #   uses: ./.github/workflows/cdk_release_code.yml
  #   with:
  #     STACK_NAME: cpt-sandbox
  #     AWS_ENVIRONMENT: int
  #     APIGEE_ENVIRONMENT: sandbox
  #     VERSION_NUMBER: ${{ needs.tag_release.outputs.version_tag }}
  #     COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
  #     CDK_APP_Name: CptsApiSandboxApp
  #     LOG_RETENTION_IN_DAYS: 30
  #     LOG_LEVEL: DEBUG
  #     ENABLE_MUTUAL_TLS: false
  #     TRUSTSTORE_FILE: clinical-tracker-sandbox-truststore.pem
  #   secrets:
  #     CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.INT_CLOUD_FORMATION_DEPLOY_ROLE }}
  #     CDK_PULL_IMAGE_ROLE: ${{ secrets.INT_CDK_PULL_IMAGE_ROLE }}
  #     PROXYGEN_ROLE: ${{ secrets.PROXYGEN_PROD_ROLE }}
  #     TARGET_SPINE_SERVER: sandbox
  #     REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}

  release_prod:
    needs: [get_commit_id, tag_release, package_code, release_int]
    uses: ./.github/workflows/cdk_release_code.yml
    with:
      STACK_NAME: cpt
      AWS_ENVIRONMENT: prod
      APIGEE_ENVIRONMENT: prod
      VERSION_NUMBER: ${{ needs.tag_release.outputs.version_tag }}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
      CDK_APP_Name: CptsApiApp
      LOG_RETENTION_IN_DAYS: 30
      LOG_LEVEL: DEBUG
      ENABLE_MUTUAL_TLS: false
      TRUSTSTORE_FILE: clinical-tracker-truststore.pem
      RUN_REGRESSION_TESTS: false
      CREATE_INT_RELEASE_NOTES: true
      CREATE_PROD_RELEASE_NOTES: true
      MARK_JIRA_RELEASED: true
      CREATE_INT_RC_RELEASE_NOTES: false
      MTLS_KEY: clinical-tracker-mtls-1
      IS_PULL_REQUEST: false
      FORWARD_CSOC_LOGS: true
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE: ${{ secrets.PROD_CLOUD_FORMATION_DEPLOY_ROLE }}
      CDK_PULL_IMAGE_ROLE: ${{ secrets.PROD_CDK_PULL_IMAGE_ROLE }}
      PROXYGEN_ROLE: ${{ secrets.PROXYGEN_PROD_ROLE }}
      TARGET_SPINE_SERVER: ${{ secrets.PROD_TARGET_SPINE_SERVER }}
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}
      DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      INT_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.INT_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      PROD_CLOUD_FORMATION_CHECK_VERSION_ROLE: ${{ secrets.PROD_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
      DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE: ${{ secrets.DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE }}
