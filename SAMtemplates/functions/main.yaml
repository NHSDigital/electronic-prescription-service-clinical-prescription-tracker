AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  CPT lambda functions and related resources

Globals:
  Function:
    Timeout: 50
    MemorySize: 256
    Architectures:
      - x86_64
    Runtime: nodejs20.x
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        TargetSpineServer: !Ref TargetSpineServer
        SpinePrivateKeyARN: !ImportValue account-resources:SpinePrivateKey
        SpinePublicCertificateARN: !ImportValue account-resources:SpinePublicCertificate
        SpineASIDARN: !ImportValue account-resources:SpineASID
        SpinePartyKeyARN: !ImportValue account-resources:SpinePartyKey
        SpineCAChainARN: !ImportValue account-resources:SpineCAChain
        ServiceSearchApiKeyARN: !ImportValue account-resources:ServiceSearchApiKey
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38"

Parameters:
  StackName:
    Type: String
    Default: none

  EnableMutualTLS:
    Type: String

  TruststoreVersion:
    Type: String

  TargetSpineServer:
    Type: String

  LogRetentionInDays:
    Type: Number

  EnableSplunk:
    Type: String

  VersionNumber:
    Type: String

  CommitId:
    Type: String

Conditions:
  ShouldUseMutualTLS: !Equals
    - true
    - !Ref EnableMutualTLS

  ShouldUseSplunk: !Equals
    - true
    - !Ref EnableSplunk

Resources:
  GetSecretsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: get-secrets-layer
      Description: get secrets layer
      ContentUri: ../../packages/getSecretLayer/lib/get-secrets-layer.zip
      RetentionPolicy: Retain

  ClinicalView:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-ClinicalView"
      CodeUri: ../../packages
      Handler: handler.handler
      Role: !GetAtt ClinicalViewResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          VERSION_NUMBER: !Ref VersionNumber
          COMMIT_ID: !Ref CommitId
          AWS_LAMBDA_EXEC_WRAPPER: /opt/get-secrets-layer
      Layers:
        - !Ref GetSecretsLayer
      # Events:
      #   status:
      #     Type: HttpApi
      #     Properties:
      #       ApiId: !Ref HttpApiGateway
      #       Path: /clinical-view
      #       Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      guard:
        SuppressedRules:
          - LAMBDA_DLQ_CHECK
          - LAMBDA_INSIDE_VPC
          - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: clinicalView/tsconfig.json
        packages: bundle
        EntryPoints:
          - clinicalView/src/handler.ts

  ClinicalViewResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: lambda_resources.yaml
      Parameters:
        StackName: !Ref StackName
        LambdaName: !Sub "${StackName}-ClinicalView"
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-ClinicalView
        IncludeAdditionalPolicies: true
        AdditionalPolicies: !Join
          - ","
          - - !ImportValue account-resources:LambdaAccessSecretsPolicy
        LogRetentionInDays: !Ref LogRetentionInDays
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        EnableSplunk: !Ref EnableSplunk
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream

  PrescriptionSearch:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-PrescriptionSearch"
      CodeUri: ../../packages
      Handler: handler.handler
      Role: !GetAtt PrescriptionSearchResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          VERSION_NUMBER: !Ref VersionNumber
          COMMIT_ID: !Ref CommitId
          AWS_LAMBDA_EXEC_WRAPPER: /opt/get-secrets-layer
      Layers:
        - !Ref GetSecretsLayer
      Events:
        status:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /
            Method: get
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
          - LAMBDA_DLQ_CHECK
          - LAMBDA_INSIDE_VPC
          - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: prescriptionSearch/tsconfig.json
        packages: bundle
        EntryPoints:
          - prescriptionSearch/src/handler.ts

  PrescriptionSearchResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: lambda_resources.yaml
      Parameters:
        StackName: !Ref StackName
        LambdaName: !Sub "${StackName}-PrescriptionSearch"
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-PrescriptionSearch
        IncludeAdditionalPolicies: true
        AdditionalPolicies: !Join
          - ","
          - - !ImportValue account-resources:LambdaAccessSecretsPolicy
        LogRetentionInDays: !Ref LogRetentionInDays
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        EnableSplunk: !Ref EnableSplunk
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream

  Status:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-status"
      CodeUri: ../../packages
      Handler: statusLambda.handler
      Role: !GetAtt StatusResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          VERSION_NUMBER: !Ref VersionNumber
          COMMIT_ID: !Ref CommitId
          AWS_LAMBDA_EXEC_WRAPPER: /opt/get-secrets-layer
      Layers:
        - !Ref GetSecretsLayer
      Events:
        status:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /_status
            Method: get
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
          - LAMBDA_DLQ_CHECK
          - LAMBDA_INSIDE_VPC
          - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: statusLambda/tsconfig.json
        packages: bundle
        EntryPoints:
          - statusLambda/src/statusLambda.ts

  StatusResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: lambda_resources.yaml
      Parameters:
        StackName: !Ref StackName
        LambdaName: !Sub ${StackName}-status
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-status
        IncludeAdditionalPolicies: true
        AdditionalPolicies: !Join
          - ","
          - - !ImportValue account-resources:LambdaAccessSecretsPolicy
        LogRetentionInDays: !Ref LogRetentionInDays
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        EnableSplunk: !Ref EnableSplunk
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream

  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join:
          - "."
          - - !Sub ${StackName}
            - Fn::ImportValue: eps-route53-resources:EPS-domain
      DomainValidationOptions:
        - DomainName:
            Fn::Join:
              - "."
              - - !Sub ${StackName}
                - Fn::ImportValue: eps-route53-resources:EPS-domain
          HostedZoneId:
            Fn::ImportValue: eps-route53-resources:EPS-ZoneID

  HttpApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
      Domain:
        DomainName:
          Fn::Join:
            - "."
            - - !Sub ${StackName}
              - Fn::ImportValue: eps-route53-resources:EPS-domain
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId:
            Fn::ImportValue: eps-route53-resources:EPS-ZoneID
        EndpointConfiguration: REGIONAL
        SecurityPolicy: TLS_1_2
        MutualTlsAuthentication:
          TruststoreUri:
            "Fn::If":
              - ShouldUseMutualTLS
              - Fn::Join:
                  - "/"
                  - - "s3:/"
                    - !Select [
                        5,
                        !Split [
                          ":",
                          Fn::ImportValue: account-resources:TrustStoreBucket,
                        ],
                      ]
                    - "clinical-tracker-truststore.pem"
              - !Ref "AWS::NoValue"
          TruststoreVersion:
            "Fn::If":
              - ShouldUseMutualTLS
              - !Ref TruststoreVersion
              - !Ref "AWS::NoValue"
      DisableExecuteApiEndpoint:
        "Fn::If":
          - ShouldUseMutualTLS
          - true
          - !Ref "AWS::NoValue"
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGwAccessLogs.Arn
        Format: "{ \
          \"requestTime\": \"$context.requestTime\", \
          \"apiId\": \"$context.apiId\", \
          \"accountId\": \"$context.accountId\", \
          \"resourcePath\": \"$context.resourcePath\", \
          \"stage\": \"$context.stage\", \
          \"requestId\": \"$context.requestId\", \
          \"extendedRequestId\": \"$context.extendedRequestId\", \
          \"status\": \"$context.status\", \
          \"httpMethod\": \"$context.httpMethod\", \
          \"protocol\": \"$context.protocol\", \
          \"path\": \"$context.path\", \
          \"responseLatency\": \"$context.responseLatency\", \
          \"responseLength\": \"$context.responseLength\", \
          \"domainName\": \"$context.domainName\", \
          \"identity\": { \
          \"sourceIp\": \"$context.identity.sourceIp\", \
          \"userAgent\": \"$context.identity.userAgent\", \
          \"clientCert\":{ \
          \"subjectDN\": \"$context.identity.clientCert.subjectDN\", \
          \"issuerDN\": \"$context.identity.clientCert.issuerDN\", \
          \"serialNumber\": \"$context.identity.clientCert.serialNumber\", \
          \"validityNotBefore\": \"$context.identity.clientCert.validity.notBefore\", \
          \"validityNotAfter\": \"$context.identity.clientCert.validity.notAfter\" \
          }}, \
          \"integration\":{ \
          \"error\": \"$context.integration.error\", \
          \"integrationStatus\": \"$context.integration.integrationStatus\", \
          \"latency\": \"$context.integration.latency\", \
          \"requestId\": \"$context.integration.requestId\", \
          \"status\": \"$context.integration.status\" \
          }}"

  ApiGwAccessLogs:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
          - CW_LOGGROUP_RETENTION_PERIOD_CHECK
    Properties:
      LogGroupName:
        !Join [
          "/",
          ["/aws/apigateway", !Sub "${StackName}", !Sub "${HttpApiGateway}"],
        ]
      RetentionInDays: !Ref LogRetentionInDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  ApiGwAccessLogsSplunkSubscriptionFilter:
    Condition: ShouldUseSplunk
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
      LogGroupName: !Ref ApiGwAccessLogs
      FilterPattern: "" # All logs
      DestinationArn: !ImportValue lambda-resources:SplunkDeliveryStream

Outputs:
  ClinicalViewFunctionName:
    Description: The function ARN of the ClinicalView lambda
    Value: !Ref ClinicalView

  ClinicalViewFunctionArn:
    Description: The function ARN of the  ClinicalView lambda
    Value: !GetAtt ClinicalView.Arn

  PrescriptionSearchFunctionName:
    Description: The function name of the PrescriptionSearch lambda
    Value: !Ref PrescriptionSearch

  PrescriptionSearchFunctionArn:
    Description: The function ARN of the  PrescriptionSearch lambda
    Value: !GetAtt PrescriptionSearch.Arn

  StatusFunctionName:
    Description: The function name of the Status lambda
    Value: !Ref Status

  StatusFunctionArn:
    Description: The function ARN of the Status lambda
    Value: !GetAtt Status.Arn
